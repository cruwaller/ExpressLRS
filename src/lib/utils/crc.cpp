#include "crc.h"

#define CRC16_POLY_NEW  15
#define CRC16_PARITY    1

#if CRC16_POLY_TESTING
uint8_t CRC16_POLY_PKT[5] = {0x11, 0x22, 0x33, 0x44, 0x55};
#endif

uint8_t FAST_CODE_1 CalcCRCxor(uint8_t const *data, uint16_t length, uint8_t crc)
{
    while (length--) {
        crc = crc ^ *data++;
    }
    return crc;
}

uint8_t FAST_CODE_1 CalcCRCxor(uint8_t const data, uint8_t const crc)
{
    return crc ^ data;
}


/* CRC8 implementation with polynom = x​7​+ x​6​+ x​4​+ x​2​+ x​0 ​(0xD5) */
// this is same as crc8_dvb_s2
uint8_t DRAM_FORCE_ATTR crc8tab[256] = {
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
    0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
    0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
    0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9};

uint8_t FAST_CODE_1
CalcCRC8_D5(uint8_t const data, uint8_t const crc)
{
    return crc8tab[crc ^ data];
}

uint8_t FAST_CODE_1
CalcCRC8len_D5(uint8_t const *data, uint16_t length, uint8_t crc)
{
    while (length--) {
        crc = crc8tab[crc ^ *data++];
    }
    return crc;
}

uint8_t FAST_CODE_1
CalcCRC8(uint8_t const data, uint8_t crc, uint8_t const poly)
{
    if (0xD5 != poly) {
        crc ^= data;
        for (int ii = 0; ii < 8; ++ii) {
            if (crc & 0x80)
                crc = (crc << 1) ^ poly;
            else
                crc = crc << 1;
        }
        return crc;
    }
    return CalcCRC8_D5(data, crc);
}

uint8_t FAST_CODE_1
CalcCRC8len(uint8_t const *data, uint16_t length,
            uint8_t crc, uint8_t const poly)
{
    if (0xD5 != poly) {
        while (length--)
            crc = CalcCRC8(*data++, crc, poly);
        return crc;
    }
    return CalcCRC8len_D5(data, length, crc);
}

#if !CRC16_POLY_NEW
#define CRC_REVERSED 1
/*
 * This mysterious table is just the CRC of each possible byte. It can be
 * computed using the standard bit-at-a-time methods. The polynomial can
 * be seen in entry 128, 0x8408. This corresponds to x^0 + x^5 + x^12.
 * Add the implicit x^16, and you have the standard CRC-CCITT.
 */
uint16_t DRAM_FORCE_ATTR crc16_table[256] = {
	0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
	0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
	0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
	0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
	0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
	0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
	0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
	0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
	0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
	0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
	0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
	0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
	0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
	0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
	0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
	0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
	0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
	0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
	0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
	0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
	0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
	0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
	0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
	0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
	0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
	0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
	0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
	0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
	0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};
#elif (CRC16_POLY_NEW == 16) || (CRC16_POLY_NEW == 15)
// https://users.ece.cmu.edu/~koopman/crc/c16/0x9eb2.txt
// Poly: 0x3D65 (implicit+1 = 0x9EB2), reversed: FALSE, (HD=6 up to 135b)
uint16_t DRAM_FORCE_ATTR crc16_table[256] = {
    0x0000, 0x3D65, 0x7ACA, 0x47AF, 0xF594, 0xC8F1, 0x8F5E, 0xB23B,
    0xD64D, 0xEB28, 0xAC87, 0x91E2, 0x23D9, 0x1EBC, 0x5913, 0x6476,
    0x91FF, 0xAC9A, 0xEB35, 0xD650, 0x646B, 0x590E, 0x1EA1, 0x23C4,
    0x47B2, 0x7AD7, 0x3D78, 0x001D, 0xB226, 0x8F43, 0xC8EC, 0xF589,
    0x1E9B, 0x23FE, 0x6451, 0x5934, 0xEB0F, 0xD66A, 0x91C5, 0xACA0,
    0xC8D6, 0xF5B3, 0xB21C, 0x8F79, 0x3D42, 0x0027, 0x4788, 0x7AED,
    0x8F64, 0xB201, 0xF5AE, 0xC8CB, 0x7AF0, 0x4795, 0x003A, 0x3D5F,
    0x5929, 0x644C, 0x23E3, 0x1E86, 0xACBD, 0x91D8, 0xD677, 0xEB12,
    0x3D36, 0x0053, 0x47FC, 0x7A99, 0xC8A2, 0xF5C7, 0xB268, 0x8F0D,
    0xEB7B, 0xD61E, 0x91B1, 0xACD4, 0x1EEF, 0x238A, 0x6425, 0x5940,
    0xACC9, 0x91AC, 0xD603, 0xEB66, 0x595D, 0x6438, 0x2397, 0x1EF2,
    0x7A84, 0x47E1, 0x004E, 0x3D2B, 0x8F10, 0xB275, 0xF5DA, 0xC8BF,
    0x23AD, 0x1EC8, 0x5967, 0x6402, 0xD639, 0xEB5C, 0xACF3, 0x9196,
    0xF5E0, 0xC885, 0x8F2A, 0xB24F, 0x0074, 0x3D11, 0x7ABE, 0x47DB,
    0xB252, 0x8F37, 0xC898, 0xF5FD, 0x47C6, 0x7AA3, 0x3D0C, 0x0069,
    0x641F, 0x597A, 0x1ED5, 0x23B0, 0x918B, 0xACEE, 0xEB41, 0xD624,
    0x7A6C, 0x4709, 0x00A6, 0x3DC3, 0x8FF8, 0xB29D, 0xF532, 0xC857,
    0xAC21, 0x9144, 0xD6EB, 0xEB8E, 0x59B5, 0x64D0, 0x237F, 0x1E1A,
    0xEB93, 0xD6F6, 0x9159, 0xAC3C, 0x1E07, 0x2362, 0x64CD, 0x59A8,
    0x3DDE, 0x00BB, 0x4714, 0x7A71, 0xC84A, 0xF52F, 0xB280, 0x8FE5,
    0x64F7, 0x5992, 0x1E3D, 0x2358, 0x9163, 0xAC06, 0xEBA9, 0xD6CC,
    0xB2BA, 0x8FDF, 0xC870, 0xF515, 0x472E, 0x7A4B, 0x3DE4, 0x0081,
    0xF508, 0xC86D, 0x8FC2, 0xB2A7, 0x009C, 0x3DF9, 0x7A56, 0x4733,
    0x2345, 0x1E20, 0x598F, 0x64EA, 0xD6D1, 0xEBB4, 0xAC1B, 0x917E,
    0x475A, 0x7A3F, 0x3D90, 0x00F5, 0xB2CE, 0x8FAB, 0xC804, 0xF561,
    0x9117, 0xAC72, 0xEBDD, 0xD6B8, 0x6483, 0x59E6, 0x1E49, 0x232C,
    0xD6A5, 0xEBC0, 0xAC6F, 0x910A, 0x2331, 0x1E54, 0x59FB, 0x649E,
    0x00E8, 0x3D8D, 0x7A22, 0x4747, 0xF57C, 0xC819, 0x8FB6, 0xB2D3,
    0x59C1, 0x64A4, 0x230B, 0x1E6E, 0xAC55, 0x9130, 0xD69F, 0xEBFA,
    0x8F8C, 0xB2E9, 0xF546, 0xC823, 0x7A18, 0x477D, 0x00D2, 0x3DB7,
    0xC83E, 0xF55B, 0xB2F4, 0x8F91, 0x3DAA, 0x00CF, 0x4760, 0x7A05,
    0x1E73, 0x2316, 0x64B9, 0x59DC, 0xEBE7, 0xD682, 0x912D, 0xAC48,
};
#elif (CRC16_POLY_NEW == 14)
// http://users.ece.cmu.edu/~koopman/crc/c14/0x372b.txt
// Poly: 0x2E57 (implicit+1 = 0x372B), reversed: FALSE, (HD=6 up to 57b)
uint16_t DRAM_FORCE_ATTR crc16_table[256] = {
    0x0000, 0x2E57, 0x32F9, 0x1CAE, 0x0BA5, 0x25F2, 0x395C, 0x170B,
    0x174A, 0x391D, 0x25B3, 0x0BE4, 0x1CEF, 0x32B8, 0x2E16, 0x0041,
    0x2E94, 0x00C3, 0x1C6D, 0x323A, 0x2531, 0x0B66, 0x17C8, 0x399F,
    0x39DE, 0x1789, 0x0B27, 0x2570, 0x327B, 0x1C2C, 0x0082, 0x2ED5,
    0x337F, 0x1D28, 0x0186, 0x2FD1, 0x38DA, 0x168D, 0x0A23, 0x2474,
    0x2435, 0x0A62, 0x16CC, 0x389B, 0x2F90, 0x01C7, 0x1D69, 0x333E,
    0x1DEB, 0x33BC, 0x2F12, 0x0145, 0x164E, 0x3819, 0x24B7, 0x0AE0,
    0x0AA1, 0x24F6, 0x3858, 0x160F, 0x0104, 0x2F53, 0x33FD, 0x1DAA,
    0x08A9, 0x26FE, 0x3A50, 0x1407, 0x030C, 0x2D5B, 0x31F5, 0x1FA2,
    0x1FE3, 0x31B4, 0x2D1A, 0x034D, 0x1446, 0x3A11, 0x26BF, 0x08E8,
    0x263D, 0x086A, 0x14C4, 0x3A93, 0x2D98, 0x03CF, 0x1F61, 0x3136,
    0x3177, 0x1F20, 0x038E, 0x2DD9, 0x3AD2, 0x1485, 0x082B, 0x267C,
    0x3BD6, 0x1581, 0x092F, 0x2778, 0x3073, 0x1E24, 0x028A, 0x2CDD,
    0x2C9C, 0x02CB, 0x1E65, 0x3032, 0x2739, 0x096E, 0x15C0, 0x3B97,
    0x1542, 0x3B15, 0x27BB, 0x09EC, 0x1EE7, 0x30B0, 0x2C1E, 0x0249,
    0x0208, 0x2C5F, 0x30F1, 0x1EA6, 0x09AD, 0x27FA, 0x3B54, 0x1503,
    0x1152, 0x3F05, 0x23AB, 0x0DFC, 0x1AF7, 0x34A0, 0x280E, 0x0659,
    0x0618, 0x284F, 0x34E1, 0x1AB6, 0x0DBD, 0x23EA, 0x3F44, 0x1113,
    0x3FC6, 0x1191, 0x0D3F, 0x2368, 0x3463, 0x1A34, 0x069A, 0x28CD,
    0x288C, 0x06DB, 0x1A75, 0x3422, 0x2329, 0x0D7E, 0x11D0, 0x3F87,
    0x222D, 0x0C7A, 0x10D4, 0x3E83, 0x2988, 0x07DF, 0x1B71, 0x3526,
    0x3567, 0x1B30, 0x079E, 0x29C9, 0x3EC2, 0x1095, 0x0C3B, 0x226C,
    0x0CB9, 0x22EE, 0x3E40, 0x1017, 0x071C, 0x294B, 0x35E5, 0x1BB2,
    0x1BF3, 0x35A4, 0x290A, 0x075D, 0x1056, 0x3E01, 0x22AF, 0x0CF8,
    0x19FB, 0x37AC, 0x2B02, 0x0555, 0x125E, 0x3C09, 0x20A7, 0x0EF0,
    0x0EB1, 0x20E6, 0x3C48, 0x121F, 0x0514, 0x2B43, 0x37ED, 0x19BA,
    0x376F, 0x1938, 0x0596, 0x2BC1, 0x3CCA, 0x129D, 0x0E33, 0x2064,
    0x2025, 0x0E72, 0x12DC, 0x3C8B, 0x2B80, 0x05D7, 0x1979, 0x372E,
    0x2A84, 0x04D3, 0x187D, 0x362A, 0x2121, 0x0F76, 0x13D8, 0x3D8F,
    0x3DCE, 0x1399, 0x0F37, 0x2160, 0x366B, 0x183C, 0x0492, 0x2AC5,
    0x0410, 0x2A47, 0x36E9, 0x18BE, 0x0FB5, 0x21E2, 0x3D4C, 0x131B,
    0x135A, 0x3D0D, 0x21A3, 0x0FF4, 0x18FF, 0x36A8, 0x2A06, 0x0451,
};
#else
#error "INVALID CONFIG!"
#endif

uint16_t FAST_CODE_1 CalcCRC16(uint8_t const *data, uint16_t length, uint16_t crc)
{
#if CRC16_PARITY
    uint16_t parity = 0;
#endif
    uint8_t _byte;
    while (length--) {
        _byte = *data++;
#if CRC_REVERSED
        crc = (crc >> 8) ^ crc16_table[(crc ^ _byte) & 0xff];
#else
        crc = (crc << 8) ^ crc16_table[((crc >> 8) ^ _byte)];
#endif
#if CRC16_PARITY
        parity ^= __builtin_parity(_byte);
#endif
    }
#if CRC16_PARITY
    return ((crc & 0xFFFE) | parity);
#else
    return crc;
#endif
}

uint32_t CalcCRC32(uint8_t const *data, uint16_t len) {
   int bit;
   uint32_t mask;
   uint32_t crc = 0xFFFFFFFF;
   while (len--) {
      crc = crc ^ *data++; // Get next byte.
      for (bit = 7; bit >= 0; bit--) { // Do eight times.
         mask = -(crc & 1);
         crc = (crc >> 1) ^ (0xEDB88320 & mask);
      }
   }
   return ~crc;
}
