#include "crc.h"

/* CRC8 implementation with polynom = x​7​+ x​6​+ x​4​+ x​2​+ x​0 ​(0xD5) */
const uint8_t DRAM_FORCE_ATTR crc8tab[256] = {
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
    0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
    0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
    0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9};

// this is same as crc8_dvb_s2
uint8_t FAST_CODE_1 CalcCRC(uint8_t data, uint8_t crc)
{
    return crc8tab[crc ^ data];
}

uint8_t FAST_CODE_1 CalcCRC(volatile uint8_t const *data, uint16_t length, uint8_t crc)
{
    while (length--) {
        crc = crc8tab[crc ^ *data++];
    }
    return crc;
}

uint8_t FAST_CODE_1 CalcCRC(uint8_t const *data, uint16_t length, uint8_t crc)
{
    while (length--) {
        crc = crc8tab[crc ^ *data++];
    }
    return crc;
}

uint8_t FAST_CODE_1 CalcCRCxor(uint8_t *data, uint16_t length, uint8_t crc)
{
    while (length--) {
        crc = crc ^ *data++;
    }
    return crc;
}

uint8_t FAST_CODE_1 CalcCRCxor(uint8_t data, uint8_t crc)
{
    return crc ^ data;
}

#if !CRC16_POLY_NEW
/*
 * This mysterious table is just the CRC of each possible byte. It can be
 * computed using the standard bit-at-a-time methods. The polynomial can
 * be seen in entry 128, 0x8408. This corresponds to x^0 + x^5 + x^12.
 * Add the implicit x^16, and you have the standard CRC-CCITT.
 */
const uint16_t DRAM_FORCE_ATTR crc_ccitt_table[256] = {
	0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
	0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
	0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
	0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
	0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
	0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
	0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
	0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
	0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
	0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
	0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
	0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
	0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
	0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
	0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
	0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
	0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
	0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
	0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
	0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
	0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
	0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
	0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
	0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
	0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
	0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
	0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
	0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
	0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};
#elif (CRC16_POLY_NEW == 16) || (CRC16_POLY_NEW == 15)
// Poly is 0x9EB2 (HD=6 up to 135b)
const uint16_t DRAM_FORCE_ATTR crc_ccitt_table[256] = {
    0x0000, 0x9EB2, 0xA3D6, 0x3D64, 0xD91E, 0x47AC, 0x7AC8, 0xE47A,
    0x2C8E, 0xB23C, 0x8F58, 0x11EA, 0xF590, 0x6B22, 0x5646, 0xC8F4,
    0x591C, 0xC7AE, 0xFACA, 0x6478, 0x8002, 0x1EB0, 0x23D4, 0xBD66,
    0x7592, 0xEB20, 0xD644, 0x48F6, 0xAC8C, 0x323E, 0x0F5A, 0x91E8,
    0xB238, 0x2C8A, 0x11EE, 0x8F5C, 0x6B26, 0xF594, 0xC8F0, 0x5642,
    0x9EB6, 0x0004, 0x3D60, 0xA3D2, 0x47A8, 0xD91A, 0xE47E, 0x7ACC,
    0xEB24, 0x7596, 0x48F2, 0xD640, 0x323A, 0xAC88, 0x91EC, 0x0F5E,
    0xC7AA, 0x5918, 0x647C, 0xFACE, 0x1EB4, 0x8006, 0xBD62, 0x23D0,
    0xFAC2, 0x6470, 0x5914, 0xC7A6, 0x23DC, 0xBD6E, 0x800A, 0x1EB8,
    0xD64C, 0x48FE, 0x759A, 0xEB28, 0x0F52, 0x91E0, 0xAC84, 0x3236,
    0xA3DE, 0x3D6C, 0x0008, 0x9EBA, 0x7AC0, 0xE472, 0xD916, 0x47A4,
    0x8F50, 0x11E2, 0x2C86, 0xB234, 0x564E, 0xC8FC, 0xF598, 0x6B2A,
    0x48FA, 0xD648, 0xEB2C, 0x759E, 0x91E4, 0x0F56, 0x3232, 0xAC80,
    0x6474, 0xFAC6, 0xC7A2, 0x5910, 0xBD6A, 0x23D8, 0x1EBC, 0x800E,
    0x11E6, 0x8F54, 0xB230, 0x2C82, 0xC8F8, 0x564A, 0x6B2E, 0xF59C,
    0x3D68, 0xA3DA, 0x9EBE, 0x000C, 0xE476, 0x7AC4, 0x47A0, 0xD912,
    0x6B36, 0xF584, 0xC8E0, 0x5652, 0xB228, 0x2C9A, 0x11FE, 0x8F4C,
    0x47B8, 0xD90A, 0xE46E, 0x7ADC, 0x9EA6, 0x0014, 0x3D70, 0xA3C2,
    0x322A, 0xAC98, 0x91FC, 0x0F4E, 0xEB34, 0x7586, 0x48E2, 0xD650,
    0x1EA4, 0x8016, 0xBD72, 0x23C0, 0xC7BA, 0x5908, 0x646C, 0xFADE,
    0xD90E, 0x47BC, 0x7AD8, 0xE46A, 0x0010, 0x9EA2, 0xA3C6, 0x3D74,
    0xF580, 0x6B32, 0x5656, 0xC8E4, 0x2C9E, 0xB22C, 0x8F48, 0x11FA,
    0x8012, 0x1EA0, 0x23C4, 0xBD76, 0x590C, 0xC7BE, 0xFADA, 0x6468,
    0xAC9C, 0x322E, 0x0F4A, 0x91F8, 0x7582, 0xEB30, 0xD654, 0x48E6,
    0x91F4, 0x0F46, 0x3222, 0xAC90, 0x48EA, 0xD658, 0xEB3C, 0x758E,
    0xBD7A, 0x23C8, 0x1EAC, 0x801E, 0x6464, 0xFAD6, 0xC7B2, 0x5900,
    0xC8E8, 0x565A, 0x6B3E, 0xF58C, 0x11F6, 0x8F44, 0xB220, 0x2C92,
    0xE466, 0x7AD4, 0x47B0, 0xD902, 0x3D78, 0xA3CA, 0x9EAE, 0x001C,
    0x23CC, 0xBD7E, 0x801A, 0x1EA8, 0xFAD2, 0x6460, 0x5904, 0xC7B6,
    0x0F42, 0x91F0, 0xAC94, 0x3226, 0xD65C, 0x48EE, 0x758A, 0xEB38,
    0x7AD0, 0xE462, 0xD906, 0x47B4, 0xA3CE, 0x3D7C, 0x0018, 0x9EAA,
    0x565E, 0xC8EC, 0xF588, 0x6B3A, 0x8F40, 0x11F2, 0x2C96, 0xB224,
};
#elif (CRC16_POLY_NEW == 14)
// Poly is 0x372B (HD=6 up to 57b)
const uint16_t DRAM_FORCE_ATTR crc_ccitt_table[256] = {
    0x0000, 0x372B, 0x197D, 0x2E56, 0x32FA, 0x05D1, 0x2B87, 0x1CAC,
    0x12DF, 0x25F4, 0x0BA2, 0x3C89, 0x2025, 0x170E, 0x3958, 0x0E73,
    0x25BE, 0x1295, 0x3CC3, 0x0BE8, 0x1744, 0x206F, 0x0E39, 0x3912,
    0x3761, 0x004A, 0x2E1C, 0x1937, 0x059B, 0x32B0, 0x1CE6, 0x2BCD,
    0x3C57, 0x0B7C, 0x252A, 0x1201, 0x0EAD, 0x3986, 0x17D0, 0x20FB,
    0x2E88, 0x19A3, 0x37F5, 0x00DE, 0x1C72, 0x2B59, 0x050F, 0x3224,
    0x19E9, 0x2EC2, 0x0094, 0x37BF, 0x2B13, 0x1C38, 0x326E, 0x0545,
    0x0B36, 0x3C1D, 0x124B, 0x2560, 0x39CC, 0x0EE7, 0x20B1, 0x179A,
    0x0F85, 0x38AE, 0x16F8, 0x21D3, 0x3D7F, 0x0A54, 0x2402, 0x1329,
    0x1D5A, 0x2A71, 0x0427, 0x330C, 0x2FA0, 0x188B, 0x36DD, 0x01F6,
    0x2A3B, 0x1D10, 0x3346, 0x046D, 0x18C1, 0x2FEA, 0x01BC, 0x3697,
    0x38E4, 0x0FCF, 0x2199, 0x16B2, 0x0A1E, 0x3D35, 0x1363, 0x2448,
    0x33D2, 0x04F9, 0x2AAF, 0x1D84, 0x0128, 0x3603, 0x1855, 0x2F7E,
    0x210D, 0x1626, 0x3870, 0x0F5B, 0x13F7, 0x24DC, 0x0A8A, 0x3DA1,
    0x166C, 0x2147, 0x0F11, 0x383A, 0x2496, 0x13BD, 0x3DEB, 0x0AC0,
    0x04B3, 0x3398, 0x1DCE, 0x2AE5, 0x3649, 0x0162, 0x2F34, 0x181F,
    0x1F0A, 0x2821, 0x0677, 0x315C, 0x2DF0, 0x1ADB, 0x348D, 0x03A6,
    0x0DD5, 0x3AFE, 0x14A8, 0x2383, 0x3F2F, 0x0804, 0x2652, 0x1179,
    0x3AB4, 0x0D9F, 0x23C9, 0x14E2, 0x084E, 0x3F65, 0x1133, 0x2618,
    0x286B, 0x1F40, 0x3116, 0x063D, 0x1A91, 0x2DBA, 0x03EC, 0x34C7,
    0x235D, 0x1476, 0x3A20, 0x0D0B, 0x11A7, 0x268C, 0x08DA, 0x3FF1,
    0x3182, 0x06A9, 0x28FF, 0x1FD4, 0x0378, 0x3453, 0x1A05, 0x2D2E,
    0x06E3, 0x31C8, 0x1F9E, 0x28B5, 0x3419, 0x0332, 0x2D64, 0x1A4F,
    0x143C, 0x2317, 0x0D41, 0x3A6A, 0x26C6, 0x11ED, 0x3FBB, 0x0890,
    0x108F, 0x27A4, 0x09F2, 0x3ED9, 0x2275, 0x155E, 0x3B08, 0x0C23,
    0x0250, 0x357B, 0x1B2D, 0x2C06, 0x30AA, 0x0781, 0x29D7, 0x1EFC,
    0x3531, 0x021A, 0x2C4C, 0x1B67, 0x07CB, 0x30E0, 0x1EB6, 0x299D,
    0x27EE, 0x10C5, 0x3E93, 0x09B8, 0x1514, 0x223F, 0x0C69, 0x3B42,
    0x2CD8, 0x1BF3, 0x35A5, 0x028E, 0x1E22, 0x2909, 0x075F, 0x3074,
    0x3E07, 0x092C, 0x277A, 0x1051, 0x0CFD, 0x3BD6, 0x1580, 0x22AB,
    0x0966, 0x3E4D, 0x101B, 0x2730, 0x3B9C, 0x0CB7, 0x22E1, 0x15CA,
    0x1BB9, 0x2C92, 0x02C4, 0x35EF, 0x2943, 0x1E68, 0x303E, 0x0715,
};
#else
#error "INVALID CONFIG!"
#endif

#if CRC16_POLY_TESTING
uint8_t CRC16_POLY_PKT[5] = {0x11, 0x22, 0x33, 0x44, 0x55};
#endif

uint16_t FAST_CODE_1 CalcCRC16(uint8_t const *data, uint16_t length, uint16_t crc)
{
#if (CRC16_POLY_NEW == 14) || (CRC16_POLY_NEW == 15)
    uint16_t parity = 0;
#endif
    uint8_t _byte;
    while (length--) {
        _byte = *data++;
        crc = (crc >> 8) ^ crc_ccitt_table[(crc ^ _byte) & 0xff];
#if (CRC16_POLY_NEW == 14) || (CRC16_POLY_NEW == 15)
        parity ^= __builtin_parity(_byte);
#endif
    }
#if (CRC16_POLY_NEW == 14)
    return ((crc & 0x3FFF) | (parity << 14));
#elif (CRC16_POLY_NEW == 15)
    return ((crc & 0xFFFE) | parity);
#else
    return crc;
#endif
}

uint8_t crc8_dvb_s2(uint8_t crc, uint8_t a)
{
    crc ^= a;
    for (int ii = 0; ii < 8; ++ii)
    {
        if (crc & 0x80)
        {
            crc = (crc << 1) ^ 0xD5;
        }
        else
        {
            crc = crc << 1;
        }
    }
    return crc;
}

uint8_t crc8_dvb_s2(uint8_t const* data, uint16_t length)
{
    uint8_t crc = 0u;
    while (length--)
        crc = crc8_dvb_s2(*data++, crc);
    return crc;
}

uint32_t CalcCRC32(uint8_t const *data, uint16_t len) {
   int bit;
   uint32_t mask;
   uint32_t crc = 0xFFFFFFFF;
   while (len--) {
      crc = crc ^ *data++; // Get next byte.
      for (bit = 7; bit >= 0; bit--) { // Do eight times.
         mask = -(crc & 1);
         crc = (crc >> 1) ^ (0xEDB88320 & mask);
      }
   }
   return ~crc;
}

#if (CRSF_CMD_CRC)
const uint8_t DRAM_FORCE_ATTR crc8tabcmd[256] =
    {0x00, 0xBA, 0xCE, 0x74, 0x26, 0x9C, 0xE8, 0x52, 0x4C, 0xF6, 0x82, 0x38, 0x6A, 0xD0, 0xA4, 0x1E,
     0x98, 0x22, 0x56, 0xEC, 0xBE, 0x04, 0x70, 0xCA, 0xD4, 0x6E, 0x1A, 0xA0, 0xF2, 0x48, 0x3C, 0x86,
     0x8A, 0x30, 0x44, 0xFE, 0xAC, 0x16, 0x62, 0xD8, 0xC6, 0x7C, 0x08, 0xB2, 0xE0, 0x5A, 0x2E, 0x94,
     0x12, 0xA8, 0xDC, 0x66, 0x34, 0x8E, 0xFA, 0x40, 0x5E, 0xE4, 0x90, 0x2A, 0x78, 0xC2, 0xB6, 0x0C,
     0xAE, 0x14, 0x60, 0xDA, 0x88, 0x32, 0x46, 0xFC, 0xE2, 0x58, 0x2C, 0x96, 0xC4, 0x7E, 0x0A, 0xB0,
     0x36, 0x8C, 0xF8, 0x42, 0x10, 0xAA, 0xDE, 0x64, 0x7A, 0xC0, 0xB4, 0x0E, 0x5C, 0xE6, 0x92, 0x28,
     0x24, 0x9E, 0xEA, 0x50, 0x02, 0xB8, 0xCC, 0x76, 0x68, 0xD2, 0xA6, 0x1C, 0x4E, 0xF4, 0x80, 0x3A,
     0xBC, 0x06, 0x72, 0xC8, 0x9A, 0x20, 0x54, 0xEE, 0xF0, 0x4A, 0x3E, 0x84, 0xD6, 0x6C, 0x18, 0xA2,
     0xE6, 0x5C, 0x28, 0x92, 0xC0, 0x7A, 0x0E, 0xB4, 0xAA, 0x10, 0x64, 0xDE, 0x8C, 0x36, 0x42, 0xF8,
     0x7E, 0xC4, 0xB0, 0x0A, 0x58, 0xE2, 0x96, 0x2C, 0x32, 0x88, 0xFC, 0x46, 0x14, 0xAE, 0xDA, 0x60,
     0x6C, 0xD6, 0xA2, 0x18, 0x4A, 0xF0, 0x84, 0x3E, 0x20, 0x9A, 0xEE, 0x54, 0x06, 0xBC, 0xC8, 0x72,
     0xF4, 0x4E, 0x3A, 0x80, 0xD2, 0x68, 0x1C, 0xA6, 0xB8, 0x02, 0x76, 0xCC, 0x9E, 0x24, 0x50, 0xEA,
     0x48, 0xF2, 0x86, 0x3C, 0x6E, 0xD4, 0xA0, 0x1A, 0x04, 0xBE, 0xCA, 0x70, 0x22, 0x98, 0xEC, 0x56,
     0xD0, 0x6A, 0x1E, 0xA4, 0xF6, 0x4C, 0x38, 0x82, 0x9C, 0x26, 0x52, 0xE8, 0xBA, 0x00, 0x74, 0xCE,
     0xC2, 0x78, 0x0C, 0xB6, 0xE4, 0x5E, 0x2A, 0x90, 0x8E, 0x34, 0x40, 0xFA, 0xA8, 0x12, 0x66, 0xDC,
     0x5A, 0xE0, 0x94, 0x2E, 0x7C, 0xC6, 0xB2, 0x08, 0x16, 0xAC, 0xD8, 0x62, 0x30, 0x8A, 0xFE, 0x44};

uint8_t FAST_CODE_1 CalcCRCcmd(uint8_t const *data, uint16_t length, uint8_t crc)
{
    while (length--)
    {
        crc = crc8tabcmd[crc ^ *data++];
    }
    return crc;
}
#endif
