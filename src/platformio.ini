; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

# enable this to make VSCode happy
[platformio]
#defauls_envs = BARE_RX_R9MM
#defauls_envs = BARE_TX_R9M
#default_envs = RX_R9MM_R9MINI_BF_Passthrough
#default_envs = TX_R9M_2018_2W
#default_envs = TX_ESP32_WROOM_RFM95
#default_envs = RX_ESP8285
#default_envs = RX_RHF76_052
include_dir = src
lib_extra_dirs =
    lib/Radio


################################# TX CONFIGS ########################################

[LEGACY_env:TX_ExpLRS_V3_1W]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_EXPRESSLRS_PCB_TX_V3
	-D TARGET_1000mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps = NeoPixelBus

[LEGACY_env:TX_ExpLRS_V3_100mW]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_EXPRESSLRS_PCB_TX_V3
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps = NeoPixelBus

[env:TX_TTGO_LORA_V1]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_TTGO_LORA_V1_AS_TX
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps = NeoPixelBus

[env:TX_TTGO_LORA_V2]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_TTGO_LORA_V2_AS_TX
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps = NeoPixelBus

[env:TX_ESP32_WROOM_RFM95]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_ESP32_WROOM_RFM95
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}

################################# RX CONFIGS ########################################

# this can be used for RX_Mini_v0.1 and RX_ExpLRS_V3
[env:RX_ESP8285]
platform = espressif8266@2.2.3
board = esp8285
framework = arduino
upload_speed = 921600
monitor_speed = 420000
monitor_dtr = 0
monitor_rts = 0
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_esp82xx}
	-D TARGET_EXPRESSLRS_PCB_RX_V3
	-D TARGET_100mW_MODULE
	-DVTABLES_IN_FLASH
	-O3
board_build.f_cpu = 80000000L
src_filter = ${common_env_data.src_rx} ${common_env_data.src_esp82xx}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python "$PROJECT_PACKAGES_DIR/framework-arduinoespressif32/tools/esptool.py" -b 921600 -c esp8266 --before no_reset --after soft_reset write_flash -fm dout 0x0 "$SOURCE"

[env:RX_ESP8285_BF_Passthrough]
platform = ${env:RX_ESP8285.platform}
board = ${env:RX_ESP8285.board}
framework = ${env:RX_ESP8285.framework}
upload_speed = 74880
monitor_speed = ${env:RX_ESP8285.monitor_speed}
monitor_dtr = ${env:RX_ESP8285.monitor_dtr}
monitor_rts = ${env:RX_ESP8285.monitor_rts}
build_unflags = ${env:RX_ESP8285.build_unflags}
build_flags = ${env:RX_ESP8285.build_flags}
board_build.f_cpu = ${env:RX_ESP8285.board_build.f_cpu}
src_filter = ${env:RX_ESP8285.src_filter}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 74880
	python "$PROJECT_PACKAGES_DIR/framework-arduinoespressif32/tools/esptool.py" --no-stub -b 74880 -c esp8266 --before no_reset --after soft_reset write_flash -fm dout 0x0 "$SOURCE"

[env:RX_RHF76_052]
platform = ststm32@6.0.0
framework = arduino
board = rhf76_052_HSI
board_build.mcu = stm32l051c8t6
board_build.f_cpu = 32000000L
board_build.flash_offset = 0x4000
# max size = 65536 - 0x4000 = 49152
board_upload.maximum_size = 49152
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_RHF76_052
	-D HSE_VALUE=12000000U
	-O3
	-DVECT_TAB_OFFSET=0x4000U
	#-Wl,-Tvariants/RHF76_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
monitor_speed = 420000
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/rhf76_bootloader.bin
    VECT_OFFSET=0x4000

[env:RX_RHF76_052_BF_Passthrough]
platform = ${env:RX_RHF76_052.platform}
framework = ${env:RX_RHF76_052.framework}
board = ${env:RX_RHF76_052.board}
build_unflags = ${env:RX_RHF76_052.build_unflags}
board_build.mcu = ${env:RX_RHF76_052.board_build.mcu}
board_build.f_cpu = ${env:RX_RHF76_052.board_build.f_cpu}
board_build.flash_offset = ${env:RX_RHF76_052.board_build.flash_offset}
board_upload.maximum_size = ${env:RX_RHF76_052.board_upload.maximum_size}
build_flags = ${env:RX_RHF76_052.build_flags}
src_filter = ${env:RX_RHF76_052.src_filter}
monitor_speed = ${env:RX_RHF76_052.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"


[env:RX_RAK4200]
platform = ststm32@6.0.0
framework = arduino
board = ??
board_build.mcu = stm32l071k8
board_build.f_cpu = 32000000L
board_build.flash_offset = 0x4000
# max size = 65536 - 0x4000 = 49152
board_upload.maximum_size = 49152
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_RAK4200
	-D HSE_VALUE=12000000U
	-O3
	-DVECT_TAB_OFFSET=0x4000U
	#-Wl,-Tvariants/RHF76_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
monitor_speed = 420000
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/rhf76_bootloader.bin
    VECT_OFFSET=0x4000
    
################################# R9 CONFIGS ########################################

[env:RX_R9MM_R9MINI]
platform = ststm32@6.0.0
framework = arduino
board = R9MM
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_R9M_RX
	-D HSE_VALUE=24000000U
	-O3
	-DVECT_TAB_OFFSET=0x08008000U
	-Wl,-Tvariants/R9MM/R9MM_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/r9mm_bootloader.bin
    VECT_OFFSET=0x8000

[env:RX_R9MM_R9MINI_BF_Passthrough]
platform = ${env:RX_R9MM_R9MINI.platform}
framework = ${env:RX_R9MM_R9MINI.framework}
board = ${env:RX_R9MM_R9MINI.board}
build_unflags = ${env:RX_R9MM_R9MINI.build_unflags}
build_flags = ${env:RX_R9MM_R9MINI.build_flags}
src_filter = ${env:RX_R9MM_R9MINI.src_filter}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"

[env:TX_R9M_2018_2W]
platform = ststm32@6.0.0
framework = arduino
board = bluepill_f103c8
build_unflags = -Os
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_stm32}
	-D TARGET_R9M_TX
	-D HSE_VALUE=12000000U
	-O3
	-DVECT_TAB_OFFSET=0x2000U
	-Wl,-Tvariants/R9M_ldscript.ld
src_filter = ${common_env_data.src_tx} ${common_env_data.src_stm32}
extra_scripts =
	${common_env_data.extra_scripts}
	python/opentx.py
upload_protocol = custom
upload_flags =
	BOOTLOADER=bootloader/r9m_bootloader.bin
	VECT_OFFSET=0x2000
board_build.flash_offset = 0x2000

[env:BARE_RX_R9MM]
platform = ststm32@6.0.0
framework = cmsis
#board = bluepill_f103c8
#framework = stm32cube
board = genericSTM32F103C8
board_build.mcu = stm32f103c8t6
board_build.f_cpu = 72000000L
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32_native}
	-D TARGET_R9M_RX
	-D HSE_VALUE=24000000U
	-O3
	-DVECT_TAB_OFFSET=0x8000
	-Wl,-Tvariants/R9MM/R9MM_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32_native}
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/r9mm_bootloader.bin
    VECT_OFFSET=0x8000
board_build.flash_offset = 0x8000

[env:BARE_TX_R9M]
platform = ststm32@6.0.0
framework = cmsis
#board = bluepill_f103c8
#framework = stm32cube
board = genericSTM32F103C8
board_build.mcu = stm32f103c8t6
board_build.f_cpu = 72000000L
build_unflags = -Os
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_stm32_native}
	-D TARGET_R9M_TX
	-O3
	-DVECT_TAB_OFFSET=0x2000U
	-Wl,-Tvariants/R9M_ldscript.ld
src_filter = ${common_env_data.src_tx} ${common_env_data.src_stm32_native}
extra_scripts =
	${common_env_data.extra_scripts}
	python/opentx.py
upload_protocol = custom
upload_flags =
	BOOTLOADER=bootloader/r9m_bootloader.bin
	VECT_OFFSET=0x2000
board_build.flash_offset = 0x2000

################################# COMMON ########################################

[common_env_data]
flags_tx = -DTX_MODULE=1 -I${PROJECTSRC_DIR}
flags_rx = -DRX_MODULE=1 -I${PROJECTSRC_DIR}
flags_esp32 = -DPLATFORM_ESP32=1 -I${PROJECTSRC_DIR}/esp32/
flags_esp82xx = -DPLATFORM_ESP8266=1  -I${PROJECTSRC_DIR}/esp82xx/
flags_stm32_gen = -DICACHE_RAM_ATTR="" -DPLATFORM_STM32=1 -I${PROJECTSRC_DIR}/stm32_generic/
flags_stm32 = ${common_env_data.flags_stm32_gen} -I${PROJECTSRC_DIR}/stm32/
flags_stm32_native = -DSTM32F1xx=1 ${common_env_data.flags_stm32_gen} -I${PROJECTSRC_DIR}/stm32_native/ -nostdlib -nostartfiles -fno-use-cxa-atexit
src_filter = +<*.cpp> +<*.c>
src_rx = +<rx/*> ${common_env_data.src_filter}
src_tx = +<tx/*> ${common_env_data.src_filter}
src_esp32 = +<esp32/*>
src_esp82xx = +<esp82xx/*>
src_stm32 = +<stm32/*> +<stm32_generic/*>
src_stm32_native = +<stm32_native/*> +<stm32_generic/*>
extra_scripts = pre:python/build_flags.py
