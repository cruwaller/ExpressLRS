; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

# enable this to make VSCode happy
[platformio]
#default_envs = BARE_RX_R9MM
#default_envs = BARE_TX_R9M
#default_envs = RX_R9MM_R9MINI_BF_Passthrough
#default_envs = TX_R9M
#default_envs = TX_ESP32_WROOM_RFM95
#default_envs = RX_ESP8285
#default_envs = RX_RHF76_052
#default_envs = LOGGER_TX_R9M_ESP12
#default_envs = RX_RAK4200
#default_envs = SX1280_TX_ESP32_PCB
include_dir = src

[env]
lib_extra_dirs =
    lib/Radio

################################# TX CONFIGS ########################################

[LEGACY_env:TX_ExpLRS_V3_1W]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_EXPRESSLRS_PCB_TX_V3
	-D TARGET_1000mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps =
	${common_env_data.lib_deps_esp32}
	NeoPixelBus

[LEGACY_env:TX_ExpLRS_V3_100mW]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_EXPRESSLRS_PCB_TX_V3
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps =
	${common_env_data.lib_deps_esp32}
	NeoPixelBus

[LEGACY_env:TX_TTGO_LORA_V1]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_TTGO_LORA_V1_AS_TX
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps =
	${common_env_data.lib_deps_esp32}

[LEGACY_env:TX_TTGO_LORA_V2]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_TTGO_LORA_V2_AS_TX
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps =
	${common_env_data.lib_deps_esp32}
	NeoPixelBus

[env:TX_ESP32_WROOM_RFM95]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_ESP32_WROOM_RFM95
	-D TARGET_100mW_MODULE
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps =
	${common_env_data.lib_deps_esp32}

################################# RX CONFIGS ########################################

# this can be used for RX_Mini_v0.1 and RX_ExpLRS_V3
[env:RX_ESP8285]
platform = espressif8266@2.2.3
platform_packages =
	toolchain-xtensa@2.40802.200502
	#toolchain-xtensa@2.100100.200706
board = esp8285
framework = arduino
upload_speed = 921600
monitor_speed = 420000
monitor_dtr = 0
monitor_rts = 0
#build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_esp82xx}
	-D TARGET_EXPRESSLRS_PCB_RX_V3
	-D TARGET_100mW_MODULE
	-DVTABLES_IN_FLASH
	-O3
board_build.f_cpu = 80000000L
src_filter = ${common_env_data.src_rx} ${common_env_data.src_esp82xx}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python "$PROJECT_PACKAGES_DIR/framework-arduinoespressif32/tools/esptool.py" -b 921600 -c esp8266 --before no_reset --after soft_reset write_flash -fm dout 0x0 "$SOURCE"
lib_deps = WiFiManager

[env:RX_ESP8285_BF_Passthrough]
platform = ${env:RX_ESP8285.platform}
platform_packages = ${env:RX_ESP8285.platform_packages}
board = ${env:RX_ESP8285.board}
framework = ${env:RX_ESP8285.framework}
upload_speed = 74880
monitor_speed = ${env:RX_ESP8285.monitor_speed}
monitor_dtr = ${env:RX_ESP8285.monitor_dtr}
monitor_rts = ${env:RX_ESP8285.monitor_rts}
build_unflags = ${env:RX_ESP8285.build_unflags}
build_flags = ${env:RX_ESP8285.build_flags}
board_build.f_cpu = ${env:RX_ESP8285.board_build.f_cpu}
src_filter = ${env:RX_ESP8285.src_filter}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 74880
	python "$PROJECT_PACKAGES_DIR/framework-arduinoespressif32/tools/esptool.py" --no-stub -b 74880 -c esp8266 --before no_reset --after soft_reset write_flash -fm dout 0x0 "$SOURCE"
lib_deps = ${env:RX_ESP8285.lib_deps}

################################# RHF76_052 ########################################

[LEGACY_env:RX_RHF76_052]
platform = ststm32@6.0.0
framework = arduino
board = rhf76_052_HSI
board_build.mcu = stm32l051c8t6
board_build.f_cpu = 32000000L
board_build.flash_offset = 0x4000
# max size = 65536 - 0x4000 = 49152
board_upload.maximum_size = 49152
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_RHF76_052
	-D HSE_VALUE=12000000U
	-O3
	-DVECT_TAB_OFFSET=0x4000U
	#-Wl,-Tvariants/RHF76_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
monitor_speed = 420000
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/rhf76_bootloader.bin
    VECT_OFFSET=0x4000

[LEGACY_env:RX_RHF76_052_BF_Passthrough]
platform = ${env:RX_RHF76_052.platform}
framework = ${env:RX_RHF76_052.framework}
board = ${env:RX_RHF76_052.board}
build_unflags = ${env:RX_RHF76_052.build_unflags}
board_build.mcu = ${env:RX_RHF76_052.board_build.mcu}
board_build.f_cpu = ${env:RX_RHF76_052.board_build.f_cpu}
board_build.flash_offset = ${env:RX_RHF76_052.board_build.flash_offset}
board_upload.maximum_size = ${env:RX_RHF76_052.board_upload.maximum_size}
build_flags = ${env:RX_RHF76_052.build_flags}
src_filter = ${env:RX_RHF76_052.src_filter}
monitor_speed = ${env:RX_RHF76_052.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"

################################# RAK4200 ########################################

[env:RX_RAK4200]
platform = ststm32@6.0.0
framework = arduino
board = rak4200
board_build.flash_offset = 0x4000
# max size = 65536 - 0x4000 = 49152
board_upload.maximum_size = 49152
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_RAK4200
	-D HSI_VALUE=16000000U
	-O3
	-DVECT_TAB_OFFSET=0x4000U
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
monitor_speed = 420000
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/rak4200_bootloader.bin
    VECT_OFFSET=0x4000

[env:RX_RAK4200_BF_Passthrough]
platform = ${env:RX_RAK4200.platform}
framework = ${env:RX_RAK4200.framework}
board = ${env:RX_RAK4200.board}
build_unflags = ${env:RX_RAK4200.build_unflags}
board_build.flash_offset = ${env:RX_RAK4200.board_build.flash_offset}
board_upload.maximum_size = ${env:RX_RAK4200.board_upload.maximum_size}
build_flags = ${env:RX_RAK4200.build_flags}
src_filter = ${env:RX_RAK4200.src_filter}
monitor_speed = ${env:RX_RAK4200.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"

################################# R9 CONFIGS ########################################

[env:RX_R9MM_R9MINI]
platform = ststm32@6.0.0
framework = arduino
board = R9MM
# max size = 131072 - 0x8000 = 98304
board_upload.maximum_size = 98304
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_R9M_RX
	-D HSE_VALUE=24000000U
	-O3
	-DVECT_TAB_OFFSET=0x08008000U
	-Wl,-Tvariants/R9MM/R9MM_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/r9mm_bootloader.bin
    VECT_OFFSET=0x8000

[env:RX_R9MM_R9MINI_BF_Passthrough]
platform = ${env:RX_R9MM_R9MINI.platform}
framework = ${env:RX_R9MM_R9MINI.framework}
board = ${env:RX_R9MM_R9MINI.board}
board_upload.maximum_size = ${env:RX_R9MM_R9MINI.board_upload.maximum_size}
build_unflags = ${env:RX_R9MM_R9MINI.build_unflags}
build_flags = ${env:RX_R9MM_R9MINI.build_flags}
src_filter = ${env:RX_R9MM_R9MINI.src_filter}
extra_scripts = ${common_env_data.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"

[env:RX_R9MX]
platform = ststm32@7.2.0
framework = arduino
board = nucleo_l433rc_p
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_R9M_RX=1
	-D TARGET_R9MX=1
	-D TARGET_100mW_MODULE=!
	-D HSE_VALUE=24000000U
	-O3
	-DVECT_TAB_OFFSET=0x08008000U
	-Wl,-Tvariants/R9MX/ldscript_bootloader.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
	BOOTLOADER=bootloader/r9mx_bootloader.bin
	VECT_OFFSET=0x8000
lib_deps =
	SPI
	Wire

[env:RX_R9MX_BetaflightPassthrough]
platform = ${env:RX_R9MX.platform}
framework = ${env:RX_R9MX.framework}
board = ${env:RX_R9MX.board}
build_unflags = ${env:RX_R9MX.build_unflags}
build_flags = ${env:RX_R9MX.build_flags}
src_filter = ${env:RX_R9MX.src_filter}
extra_scripts = ${env:RX_R9MX.extra_scripts}
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"
lib_deps = ${env:RX_R9MX.lib_deps}

[env:TX_R9M]
platform = ststm32@6.0.0
framework = arduino
board = bluepill_f103c8
# max size = 65536 - 0x2000 = 57344
board_upload.maximum_size = 57344
build_unflags = -Os
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_stm32}
	-D TARGET_R9M_TX
	-D HSE_VALUE=12000000U
	-O3
	-DVECT_TAB_OFFSET=0x2000U
	-Wl,-Tvariants/R9M_ldscript.ld
src_filter = ${common_env_data.src_tx} ${common_env_data.src_stm32}
extra_scripts =
	${common_env_data.extra_scripts}
	python/opentx.py
upload_protocol = custom
upload_flags =
	BOOTLOADER=bootloader/r9m_bootloader.bin
	VECT_OFFSET=0x2000
board_build.flash_offset = 0x2000

[IGNORE_env:TX_R9M_2019]
platform = ststm32@7.2.0
framework = ${env:TX_R9M.framework}
board = ${env:TX_R9M.board}
board_upload.maximum_size = ${env:TX_R9M.board_upload.maximum_size}
build_unflags = -${env:TX_R9M.build_unflags}
build_flags =
	${env:TX_R9M.build_flags}
	-D TARGET_R9MX=1
src_filter = ${env:TX_R9M.src_filter}
extra_scripts = ${env:TX_R9M.extra_scripts}
upload_protocol = ${env:TX_R9M.upload_protocol}
upload_flags = ${env:TX_R9M.upload_flags}
board_build.flash_offset = ${env:TX_R9M.board_build.flash_offset}
lib_deps = ${env:TX_R9M.lib_deps}

[SKIP_env:BARE_RX_R9MM]
platform = ststm32@6.0.0
framework = cmsis
#board = bluepill_f103c8
#framework = stm32cube
board = genericSTM32F103C8
board_build.mcu = stm32f103c8t6
board_build.f_cpu = 72000000L
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32_native}
	-D TARGET_R9M_RX
	-D HSE_VALUE=24000000U
	-O3
	-DVECT_TAB_OFFSET=0x8000
	-Wl,-Tvariants/R9MM/R9MM_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32_native}
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/r9mm_bootloader.bin
    VECT_OFFSET=0x8000
board_build.flash_offset = 0x8000

[SKIP_env:BARE_TX_R9M]
platform = ststm32@6.0.0
framework = cmsis
#board = bluepill_f103c8
#framework = stm32cube
board = genericSTM32F103C8
board_build.mcu = stm32f103c8t6
board_build.f_cpu = 72000000L
build_unflags = -Os
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_stm32_native}
	-D TARGET_R9M_TX
	-O3
	-DVECT_TAB_OFFSET=0x2000U
	-Wl,-Tvariants/R9M_ldscript.ld
src_filter = ${common_env_data.src_tx} ${common_env_data.src_stm32_native}
extra_scripts =
	${common_env_data.extra_scripts}
	python/opentx.py
upload_protocol = custom
upload_flags =
	BOOTLOADER=bootloader/r9m_bootloader.bin
	VECT_OFFSET=0x2000
board_build.flash_offset = 0x2000

################################# SX1280 ########################################

[env:SX1280_TX_ESP32_PCB]
platform = espressif32@1.12.0
board = esp32dev
framework = arduino
upload_speed = 921600
upload_resetmethod = nodemcu
monitor_speed = 115200
monitor_dtr = 0
monitor_rts = 0
build_flags =
	${common_env_data.flags_tx}
	${common_env_data.flags_esp32}
	-D TARGET_SX1280_TX_ESP32_WROOM=1
	-D TARGET_MODULE_E28=1
	-D DOMAIN_24GHZ=1
src_filter = ${common_env_data.src_tx} ${common_env_data.src_esp32}
extra_scripts = ${common_env_data.extra_scripts}
lib_deps = ${common_env_data.lib_deps_esp32}

[env:SX1280_RX_STM32_2020]
platform = ststm32@6.0.0
framework = arduino
board = bluepill_f103c8
# max size = 131072 - 0x4000 = 114688
board_upload.maximum_size = 114688
build_unflags = -Os
build_flags =
	${common_env_data.flags_rx}
	${common_env_data.flags_stm32}
	-D TARGET_SX1280_RX_STM32F1=1
	-D TARGET_MODULE_LoRa1280=1
	-D DOMAIN_24GHZ=1
	-D HSE_VALUE=12000000U
	-O3
	-D VECT_TAB_OFFSET=0x4000U
    -D FLASH_APP_OFFSET=0x4000u
    -Wl,--defsym=FLASH_APP_OFFSET=16K
	-Wl,-Tvariants/STM32F1_128K_ldscript.ld
src_filter = ${common_env_data.src_rx} ${common_env_data.src_stm32}
monitor_speed = 420000
upload_protocol = custom
extra_scripts =
	${common_env_data.extra_scripts}
	python/upload_stlink.py
upload_flags =
    BOOTLOADER=bootloader/bootloader_sx1280_rx_pcb_v02.bin
    VECT_OFFSET=0x4000

[env:SX1280_RX_STM32_2020_BF_Passthrough]
platform = ${env:SX1280_RX_STM32_2020.platform}
framework = ${env:SX1280_RX_STM32_2020.framework}
board = ${env:SX1280_RX_STM32_2020.board}
board_upload.maximum_size = ${env:SX1280_RX_STM32_2020.board_upload.maximum_size}
build_unflags = ${env:SX1280_RX_STM32_2020.build_unflags}
build_flags = ${env:SX1280_RX_STM32_2020.build_flags}
src_filter = ${env:SX1280_RX_STM32_2020.src_filter}
extra_scripts = ${common_env_data.extra_scripts}
monitor_speed = 420000
upload_protocol = custom
upload_command =
	python python/BFinitPassthrough.py 420000
	python python/UARTupload.py "$SOURCE"

################################# LOGGER ########################################

[env:LOGGER_TX_R9M_ESP12]
platform = espressif8266
board = esp12e
framework = arduino
upload_protocol = esptool
upload_speed = 115200
monitor_speed = 460800
monitor_dtr = 0
monitor_rts = 0
src_filter = -<*> +<../utils/ESP8266SerialToWebsocket/src/*>
lib_deps =
    WebSockets
    WiFiManager
lib_ignore =
	BUTTON
	ClickButton
	CRSF
	DAC
	FIFO
	POWERMGNT
	LoRa_SX127x
	RadioHalSpi
	RadioInterface
	SX1280
	HwSpi
build_flags =
	-Iutils/ESP8266SerialToWebsocket/src/
    -DBOOT0_PIN=14
    -DRESET_PIN=12
build_unflags = -Isrc
extra_scripts =
	${common_env_data.extra_scripts}

################################# COMMON ########################################

[common_env_data]
flags_tx = -DTX_MODULE=1 -I${PROJECTSRC_DIR}
flags_rx = -DRX_MODULE=1 -I${PROJECTSRC_DIR}
flags_esp32 = -DPLATFORM_ESP32=1 -I${PROJECTSRC_DIR}/esp32/
flags_esp82xx = -DPLATFORM_ESP8266=1  -I${PROJECTSRC_DIR}/esp82xx/
flags_stm32_gen = -DICACHE_RAM_ATTR="" -DPLATFORM_STM32=1 -I${PROJECTSRC_DIR}/stm32_generic/ -Wl,-Map,firmware.map
flags_stm32 = ${common_env_data.flags_stm32_gen} -I${PROJECTSRC_DIR}/stm32/
flags_stm32_native = -DSTM32F1xx=1 ${common_env_data.flags_stm32_gen} -I${PROJECTSRC_DIR}/stm32_native/ -nostdlib -nostartfiles -fno-use-cxa-atexit
src_filter = +<*.cpp> +<*.c>
src_rx = +<rx/*> ${common_env_data.src_filter}
src_tx = +<tx/*> ${common_env_data.src_filter}
src_esp32 = +<esp32/*>
src_esp82xx = +<esp82xx/*>
src_stm32 = +<stm32/*> +<stm32_generic/*>
src_stm32_native = +<stm32_native/*> +<stm32_generic/*>
extra_scripts = pre:python/build_flags.py
lib_deps_esp32 =
	https://github.com/tzapu/WiFiManager.git#development
	WebSockets
